version: '3.8'

services:
  # === HAProxy Load Balancer ===
#  haproxy:
#    image: haproxy:latest
#    container_name: haproxy
#    ports:
#      - "80:80"
#      - "443:443"
#      - "3478:3478/udp"
#      - "8404:8404"  # Stats page
#    volumes:
#      - ./data/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
#      - ./data/haproxy/certs:/usr/local/etc/haproxy/certs:ro
#    restart: unless-stopped
#    networks:
#      meet.jitsi:

  # === Certbot for Let's Encrypt ===
#  certbot:
#    image: certbot/certbot
#    container_name: certbot
#    volumes:
#      - ./data/haproxy/certs:/etc/letsencrypt
#      - ./data/haproxy/webroot:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot --quiet; done'"
#    restart: unless-stopped
#    networks:
#      meet.jitsi:

  # === HAProxy Web Interface ===
#  haproxy-wi:
#    image: azgrafx/haproxy-wi:latest
#    container_name: haproxy-wi
#    ports:
#      - "8080:80"
#    volumes:
#      - ./data/haproxy-wi/data:/var/www/haproxy-wi/app
#      - ./data/haproxy-wi/mysql:/var/lib/mysql
#    environment:
#      - MYSQL_ROOT_PASSWORD=secret
#    restart: unless-stopped
#    networks:
#      meet.jitsi:

  nginxpm:
    image: 'jc21/nginx-proxy-manager:2.12.3'
      #image: 'jc21/nginx-proxy-manager:2.9.22'
    container_name: proxy_Nginx_Proxy_Manager
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '8421:21' # FTP
    networks:
      meet.jitsi:
    environment:
      DB_SQLITE_FILE: /data/database.sqlite
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data/nginxpm/:/data:z
      - ./data/letsencrypt:/etc/letsencrypt:z

  # === Coturn (TURN server) ===
  turn:
    image: instrumentisto/coturn
    container_name: coturn
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
    volumes:
      - ./data/coturn/turnserver.conf:/etc/coturn/turnserver.conf
    restart: unless-stopped
    networks:
      meet.jitsi:

  # === Keycloak (OIDC Provider) ===
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    volumes:
      - ./data/keycloak/data:/opt/keycloak/data
    restart: unless-stopped
    networks:
      meet.jitsi:

  # === Prometheus ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    restart: unless-stopped
    networks:
      meet.jitsi:

  # === Grafana ===
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      meet.jitsi:

  # === Node exporter ===
  node-exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    pid: "host"
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      meet.jitsi:
      
  # === Apache PHP Server ===
  apache-php:
    image: php:8.2-apache
    container_name: apache-php
    ports:
      - "8280:80"
    volumes:
      - ./data/apache-php/html:/var/www/html
      - ./data/apache-php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    restart: unless-stopped
    networks:
      meet.jitsi:

#volumes:
  # define if you want named volumes instead of bind mounts
  # e.g. grafana-data:

networks:
  meet.jitsi:
